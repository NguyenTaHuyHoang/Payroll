Viết Soli - tranfer(add,amount)
Tạo js để tương tác chaincode thực hiện việc tranfer (ETH network - Dapp) https://github.com/phucthuan1st/THDTVoting/blob/main/website/src/VotingApp.js


  # Environment Variables for Fab3:
  export FAB3_CONFIG=${GOPATH}/src/github.com/hyperledger/fabric-chaincode-evm/examples/first-network-sdk-config.yaml # Path to a compatible Fabric SDK Go config file
  export FAB3_USER=User1 # User identity being used for the proxy (Matches the users names in the crypto-config directory specified in the config)
  export FAB3_ORG=Org1  # Organization of the specified user
  export FAB3_CHANNEL=mychannel # Channel to be used for the transactions
  export FAB3_CCID=evmcc # ID of the EVM Chaincode deployed in your fabric network. If not provided default is evmcc.
  export FAB3_PORT=5000 # Port the proxy will listen on. If not provided default is 5000.

make fab3
./bin/fab3

Tạo terminal mới và cd vào fabric-chaincode-evm


npm install web3@0.20.2
node
Web3 = require('web3')
web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))
const abi = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "_from",
				"type": "address"
			},
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "transferEth",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_account",
				"type": "address"
			}
		],
		"name": "getBalance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getContractAddress",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getContractBalance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]


// Địa chỉ của smart contract
const contractAddress = 'YOUR_CONTRACT_ADDRESS';0xE5749049c8f2c5f4839235DC71C2F320C856AA94

// Tạo một instance của smart contract
const contractInstance = new web3.eth.Contract(abi, contractAddress);

// Địa chỉ gửi Ether và địa chỉ nhận Ether
const fromAddress = 'SENDER_ADDRESS';
const toAddress = 'RECIPIENT_ADDRESS';

// Số lượng Ether cần chuyển (được tính bằng wei)
const amount = web3.utils.toWei('1', 'ether'); // 1 Ether

// Gọi hàm transferEth của smart contract để chuyển Ether
contractInstance.transferEth.sendTransaction(toAddress, amount, { from: fromAddress, gas: 200000 },
    function(error, transactionHash) {
        if (!error) {
            console.log('Transaction hash:', transactionHash);
        } else {
            console.error('Transaction error:', error);
        }
    }
);
